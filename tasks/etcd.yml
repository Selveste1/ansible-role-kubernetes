---

- name: ensure folder pki/etcd exists
  file:
    state: directory
    path: '{{ kubernetes_certs_dir }}/etcd'

- name: 'check {{ kubernetes_certs_dir }}/etcd/ca.crt / ca.key exists'
  stat:
    path: "{{ item }}"
  register: etcd_ca_result
  when: "inventory_hostname == groups.etcd[0]"
  with_items:
    - '{{ kubernetes_certs_dir }}/etcd/ca.crt'
    - '{{ kubernetes_certs_dir }}/etcd/ca.key'

- name: generate etcd-ca cert
  command: kubeadm alpha phase certs etcd-ca --config=/etc/kubernetes/kubeadm/clusterconfig.yaml
  when: "etcd_ca_result.results[0].stat.exists == False and etcd_ca_result.results[1].stat.exists == False"
  delegate_to: "{{ groups.etcd[0] }}"
  run_once: true

- name: get etcd ca files from first etcd node
  delegate_to: "{{ groups.etcd[0] }}"
  slurp:
    src: "{{ item }}"
  with_items:
    - '{{ kubernetes_certs_dir }}/etcd/ca.crt'
    - '{{ kubernetes_certs_dir }}/etcd/ca.key'
  register: etcd_ca_certs_register
  run_once: true

- name: copy ca files to etcd nodes
  copy:
    content: '{{ item.content | b64decode }}'
    dest: "{{ item.source }}"
  with_items: "{{ etcd_ca_certs_register.results }}"

- name: 'check {{ kubernetes_certs_dir }}/etcd/server.crt/.key exists'
  stat:
    path: "{{ item }}"
  register: etcd_server_result
  with_items:
    - '{{ kubernetes_certs_dir }}/etcd/server.crt'
    - '{{ kubernetes_certs_dir }}/etcd/server.key'

- name: generate etcd-server cert
  command: kubeadm alpha phase certs etcd-server --config=/etc/kubernetes/kubeadm/clusterconfig.yaml
  when: "etcd_server_result.results[0].stat.exists == False and etcd_server_result.results[1].stat.exists == False"

- name: 'check {{ kubernetes_certs_dir }}/etcd/peer.crt/.key exists'
  stat:
    path: "{{ item }}"
  register: etcd_peer_result
  with_items:
    - '{{ kubernetes_certs_dir }}/etcd/peer.crt'
    - '{{ kubernetes_certs_dir }}/etcd/peer.key'

- name: generate etcd-peer cert
  command: kubeadm alpha phase certs etcd-peer --config=/etc/kubernetes/kubeadm/clusterconfig.yaml
  when: "etcd_peer_result.results[0].stat.exists == False and etcd_peer_result.results[1].stat.exists == False"

- name: 'check {{ kubernetes_certs_dir }}/etcd/healthcheck-client.crt/.key exists'
  stat:
    path: "{{ item }}"
  register: etcd_health_result
  with_items:
    - '{{ kubernetes_certs_dir }}/etcd/healthcheck-client.crt'
    - '{{ kubernetes_certs_dir }}/etcd/healthcheck-client.key'

- name: generate etcd-healthcheck-client cert
  command: kubeadm alpha phase certs etcd-healthcheck-client --config=/etc/kubernetes/kubeadm/clusterconfig.yaml
  when: "etcd_health_result.results[0].stat.exists == False and etcd_health_result.results[1].stat.exists == False"

- name: 'check {{ kubernetes_certs_dir }}/apiserver-etcd-client.crt/.key exists'
  stat:
    path: "{{ item }}"
  register: etcd_apiclient_result
  with_items:
    - '{{ kubernetes_certs_dir }}/apiserver-etcd-client.crt'
    - '{{ kubernetes_certs_dir }}/apiserver-etcd-client.key'

- name: generate etcd-apiserver-etcd-client cert
  command: kubeadm alpha phase certs apiserver-etcd-client --config=/etc/kubernetes/kubeadm/clusterconfig.yaml
  when: "etcd_apiclient_result.results[0].stat.exists == False and etcd_apiclient_result.results[1].stat.exists == False"

- name: check /etc/kubernetes/manifests/etcd.yaml exists
  stat:
    path: /etc/kubernetes/manifests/etcd.yaml
  register: stat_result

- name: generate pod manifest file for etcd
  command: kubeadm alpha phase etcd local --config=/etc/kubernetes/kubeadm/clusterconfig.yaml
  when: "stat_result.stat.exists == False"
  register: etcd_pod_result

- name: ensure right kubelet systemd file exists
  template:
    src: init_etcd_kubelet.service.d.j2
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
  register: kubelet_config_file
  when: "stat_result.stat.exists == False"

- name: Reload systemd unit if args were changed.
  systemd:
    state: restarted
    daemon_reload: true
    name: kubelet
  when: kubelet_config_file is changed

- name: Ensure kubelet is started and enabled at boot.
  service:
    name: kubelet
    state: started
    enabled: true

- name: wait for etcd-cluster
  wait_for:
    host: '{{ ansible_ssh_host }}'
    port: 2379

- name: test etcd cluster
  docker_container:
    name: etcdctl
    image: quay.io/coreos/etcd:v3.2.18
    cleanup: yes
    detach: no
    volumes:
      - /etc/kubernetes:/etc/kubernetes
    command: "etcdctl --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --ca-file {{ kubernetes_certs_dir }}/etcd/ca.crt --endpoints https://{{ ansible_ssh_host }}:2379 cluster-health"
  changed_when: False
