---

- name: '{{ kubernetes_etcd_certs_dir }}'
  file:
    state: directory
    path: '{{ kubernetes_etcd_certs_dir }}'

- name: 'check {{ kubernetes_etcd_ca_cert_file }} / {{ kubernetes_etcd_ca_key_file }} exists'
  stat:
    path: "{{ item }}"
  register: etcd_ca_result
  when: inventory_hostname == groups.etcd[0]
  with_items:
    - '{{ kubernetes_etcd_ca_cert_file }}'
    - '{{ kubernetes_etcd_ca_key_file }}'

- name: generate etcd-ca cert
  command: kubeadm init phase certs etcd-ca --config={{ kubernetes_kubeadm_config_file }}
  when: not etcd_ca_result.results[0].stat.exists and not etcd_ca_result.results[1].stat.exists
  delegate_to: "{{ groups.etcd[0] }}"
  run_once: true

- name: get etcd ca files from first etcd node
  delegate_to: "{{ groups.etcd[0] }}"
  slurp:
    src: "{{ item }}"
  with_items:
    - '{{ kubernetes_etcd_ca_cert_file }}'
    - '{{ kubernetes_etcd_ca_key_file }}'
  register: etcd_ca_certs_register
  run_once: true

- name: copy ca files to etcd nodes
  copy:
    content: '{{ item.content | b64decode }}'
    dest: "{{ item.source }}"
  with_items: "{{ etcd_ca_certs_register.results }}"

- name: 'check {{ kubernetes_etcd_server_cert_file }} / {{ kubernetes_etcd_server_key_file }} exists'
  stat:
    path: "{{ item }}"
  register: etcd_server_result
  with_items:
    - '{{ kubernetes_etcd_server_cert_file }}'
    - '{{ kubernetes_etcd_server_key_file }}'

- name: generate etcd-server cert
  command: kubeadm init phase certs etcd-server --config={{ kubernetes_kubeadm_config_file }}
  when: not etcd_server_result.results[0].stat.exists and not etcd_server_result.results[1].stat.exists

- name: 'check {{ kubernetes_etcd_peer_cert_file }} / {{ kubernetes_etcd_peer_key_file }} exists'
  stat:
    path: "{{ item }}"
  register: etcd_peer_result
  with_items:
    - '{{ kubernetes_etcd_peer_cert_file }}'
    - '{{ kubernetes_etcd_peer_key_file }}'

- name: generate etcd-peer cert
  command: kubeadm init phase certs etcd-peer --config={{ kubernetes_kubeadm_config_file }}
  when: "not etcd_peer_result.results[0].stat.exists and not etcd_peer_result.results[1].stat.exists"

- name: >
    check {{ kubernetes_etcd_healthcheck_client_cert_file }} /
     {{ kubernetes_etcd_healthcheck_client_key_file }} exists
  stat:
    path: "{{ item }}"
  register: etcd_health_result
  with_items:
    - '{{ kubernetes_etcd_healthcheck_client_cert_file }}'
    - '{{ kubernetes_etcd_healthcheck_client_key_file }}'

- name: generate etcd-healthcheck-client cert
  command: kubeadm init phase certs etcd-healthcheck-client --config={{ kubernetes_kubeadm_config_file }}
  when:
  - not etcd_health_result.results[0].stat.exists
  - not etcd_health_result.results[1].stat.exists

- name: >
    check {{ kubernetes_etcd_apiserver_client_cert_file }} /
     {{ kubernetes_etcd_apiserver_client_key_file }} exists
  stat:
    path: "{{ item }}"
  register: etcd_apiclient_result
  with_items:
    - '{{ kubernetes_etcd_apiserver_client_cert_file }}'
    - '{{ kubernetes_etcd_apiserver_client_key_file }}'

- name: generate etcd-apiserver-etcd-client cert
  command: kubeadm init phase certs apiserver-etcd-client --config={{ kubernetes_kubeadm_config_file }}
  when:
  - not etcd_apiclient_result.results[0].stat.exists
  - not etcd_apiclient_result.results[1].stat.exists

- name: check {{ kubernetes_etcd_manifest_file }} exists
  stat:
    path: '{{ kubernetes_etcd_manifest_file }}'
  register: stat_result

- name: '{{ kubernetes_etcd_manifest_file }}'
  command: kubeadm init phase etcd local --config={{ kubernetes_kubeadm_config_file }}
  when: "not stat_result.stat.exists"
  register: etcd_pod_result

- name: ensure right kubelet systemd file exists
  template:
    src: init_etcd_kubelet.service.d.j2
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
  register: kubelet_config_file
  when: "not stat_result.stat.exists"

- name: Reload systemd unit if args were changed.
  systemd:
    state: restarted
    daemon_reload: true
    name: kubelet
  when: kubelet_config_file is changed

- name: Ensure kubelet is started and enabled at boot.
  service:
    name: kubelet
    state: started
    enabled: true

- name: wait for etcd-cluster
  wait_for:
    host: '{{ ansible_host | default(ansible_default_ipv4.address) }}'
    port: '{{ kubernetes_etcd_client_port }}'

- name: test etcd cluster
  docker_container:
    name: etcdctl
    image: quay.io/coreos/etcd:v3.2.18
    cleanup: yes
    detach: no
    volumes:
      - '{{ kubernetes_config_dir }}:/etc/kubernetes'
    command: >
      etcdctl --cert-file {{ kubernetes_etcd_peer_cert_file }}
       --key-file {{ kubernetes_etcd_peer_key_file }}
       --ca-file {{ kubernetes_etcd_ca_cert_file }}
       --endpoints https://{{ ansible_host | default(ansible_default_ipv4.address) }}:{{ kubernetes_etcd_client_port }}
       cluster-health
  changed_when: False
