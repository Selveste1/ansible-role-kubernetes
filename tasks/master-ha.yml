---

- name: get config files from primary master
  delegate_to: "{{ groups.k8s_masters[0] }}"
  slurp:
    src: "{{ item }}"
  with_items:
    - '{{ kubernetes_certs_dir }}/ca.crt'
    - '{{ kubernetes_certs_dir }}/ca.key'
    - '{{ kubernetes_certs_dir }}/etcd/ca.crt'
    - '{{ kubernetes_certs_dir }}/etcd/ca.key'
    - '{{ kubernetes_certs_dir }}/sa.key'
    - '{{ kubernetes_certs_dir }}/sa.pub'
    - '{{ kubernetes_certs_dir }}/front-proxy-ca.crt'
    - '{{ kubernetes_certs_dir }}/front-proxy-ca.key'
    - '{{ kubernetes_config_dir }}/admin.conf'
  register: master_certs_configs_register

- name: copy config files to all masters
  copy:
    content: '{{ item.content | b64decode }}'
    dest: "{{ item.source }}"
  with_items: "{{ master_certs_configs_register.results }}"

- name: check node is already in cluster
  delegate_to: "{{ groups.k8s_masters[0] }}"
  command: "kubectl get nodes -n kube-system --kubeconfig {{ kubernetes_config_dir }}/admin.conf -o name"
  register: get_node_register
  changed_when: false

- name: get join command from master
  delegate_to: "{{ groups.k8s_masters[0] }}"
  command: "kubeadm token create --print-join-command"
  changed_when: false
  when: ( 'node/' + ansible_nodename ) not in get_node_register.stdout_lines
  register: join_command_register

- name: join master node into cluster
  command: "{{ join_command_register.stdout }} --experimental-control-plane"
  when: ( 'node/' + ansible_nodename ) not in get_node_register.stdout_lines
